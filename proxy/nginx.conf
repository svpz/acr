worker_processes auto;

events {
    worker_connections 1024;  # Number of simultaneous connections that can be handled by a worker process
}


http {
    # Define the rate limit zone
    # $binary_remote_addr is client ip <- used for tracking client req
    # The zone creates a shared memory of size 10m to store data for rate limiting
    # and the rate is defined as 10 requests per second
    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=10r/s;

    upstream backend_servers {
        # handles load balancing
        # This uses docker internal networking
        server api:8000;
    }

    server {
        # starts the nginx server on port 80
        listen 80;

        # This is for local, whatever we put here will only be entertained
        server_name localhost;

        # Serve static files
        location /static/ {
            alias /app/staticfiles/;
            expires -1;  # Disable caching
            add_header Cache-Control "no-cache, no-store, must-revalidate";  # Force revalidation

#             types {
#                    text/css css;
#                    application/javascript js;
#                    application/json json;
#             }
            include mime.types;
            default_type application/octet-stream;
        }


        location / {
            # Apply rate limiting with a burst allowance
            # Applies tge zone we created earlier inside this block
            # burst <--- This allows a "burst" of up to 20 requests. This means
            # that clients can temporarily exceed the rate limit, but
            # they will still be limited if they exceed 20 requests at once.
            # The nodelay option ensures that requests exceeding the burst
            # are immediately rejected rather than queued.
            # Basically applies a leaky bucket algo here
            limit_req zone=req_limit_per_ip burst=20 nodelay;

            proxy_pass http://backend_servers;  # <--------- Forwards the request to upstreams

            # We also set the incoming header to be passed into the container
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}